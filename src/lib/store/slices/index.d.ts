/// <reference types="react" />
declare const _default: (import("@reduxjs/toolkit").Slice<import("./contextPanel.slice").ContextPanelStore, {
    openPanel: (_: import("immer/dist/internal").WritableDraft<import("./contextPanel.slice").ContextPanelStore>, action: {
        payload: Omit<import("../..").ContextPanelProps, "open">;
        type: string;
    }) => {
        open: true;
        classes?: Partial<Record<"root" | "drawerContent", string>> | undefined;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        className?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
        components?: {
            Root?: import("react").ElementType<any> | undefined;
            Backdrop?: import("react").ElementType<any> | undefined;
        } | undefined;
        componentsProps?: {
            root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
        } | undefined;
        slotProps?: {
            root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
        } | undefined;
        slots?: {
            root?: import("react").ElementType<any> | undefined;
            backdrop?: import("react").ElementType<any> | undefined;
        } | undefined;
        sx?: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
        transitionDuration?: number | {
            appear?: number | undefined;
            enter?: number | undefined;
            exit?: number | undefined;
        } | {
            appear?: number | undefined;
            enter?: number | undefined;
            exit?: number | undefined;
        } | undefined;
        BackdropComponent?: import("react").ElementType<import("@mui/material").BackdropProps<"div", {}>> | undefined;
        BackdropProps?: Partial<import("@mui/material").BackdropProps<"div", {}>> | undefined;
        closeAfterTransition?: boolean | undefined;
        container?: Element | (() => Element | null) | null | undefined;
        disableAutoFocus?: boolean | undefined;
        disableEnforceFocus?: boolean | undefined;
        disableEscapeKeyDown?: boolean | undefined;
        disablePortal?: boolean | undefined;
        disableRestoreFocus?: boolean | undefined;
        disableScrollLock?: boolean | undefined;
        hideBackdrop?: boolean | undefined;
        keepMounted?: boolean | undefined;
        onBackdropClick?: import("react").ReactEventHandler<{}> | undefined;
        onClose?: ((event: {}, reason: "backdropClick" | "escapeKeyDown") => void) | undefined;
        key?: import("react").Key | null | undefined;
        position?: import("../..").ContextPanelPosition | undefined;
        anchor?: "bottom" | "left" | "right" | "top" | undefined;
        elevation?: number | undefined;
        ModalProps?: Partial<import("@mui/material").ModalProps<"div", {}>> | undefined;
        PaperProps?: Partial<import("@mui/material").PaperProps<"div", {}>> | undefined;
        SlideProps?: Partial<import("@mui/material").SlideProps> | undefined;
        variant?: "permanent" | "persistent" | "temporary" | undefined;
        children?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    };
    closePanel: () => {
        open: boolean;
    };
}, "icatalyst/contextPanel"> | import("@reduxjs/toolkit").Slice<import("../..").DialogProps, {
    openDialog: (_: import("immer/dist/internal").WritableDraft<import("../..").DialogProps>, action: {
        payload: Omit<import("../..").DialogProps, "open">;
        type: string;
    }) => {
        open: true;
        children?: import("react").ReactNode;
        classes?: Partial<import("@mui/material").DialogClasses> | undefined;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        className?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
        components?: {
            Root?: import("react").ElementType<any> | undefined;
            Backdrop?: import("react").ElementType<any> | undefined;
        } | undefined;
        componentsProps?: {
            root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
        } | undefined;
        slotProps?: {
            root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
        } | undefined;
        slots?: {
            root?: import("react").ElementType<any> | undefined;
            backdrop?: import("react").ElementType<any> | undefined;
        } | undefined;
        sx?: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
        transitionDuration?: number | {
            appear?: number | undefined;
            enter?: number | undefined;
            exit?: number | undefined;
        } | {
            appear?: number | undefined;
            enter?: number | undefined;
            exit?: number | undefined;
        } | undefined;
        BackdropComponent?: import("react").ElementType<import("@mui/material").BackdropProps<"div", {}>> | undefined;
        BackdropProps?: Partial<import("@mui/material").BackdropProps<"div", {}>> | undefined;
        closeAfterTransition?: boolean | undefined;
        container?: Element | (() => Element | null) | null | undefined;
        disableAutoFocus?: boolean | undefined;
        disableEnforceFocus?: boolean | undefined;
        disableEscapeKeyDown?: boolean | undefined;
        disablePortal?: boolean | undefined;
        disableRestoreFocus?: boolean | undefined;
        disableScrollLock?: boolean | undefined;
        hideBackdrop?: boolean | undefined;
        keepMounted?: boolean | undefined;
        onBackdropClick?: import("react").ReactEventHandler<{}> | undefined;
        onClose?: ((event: Record<any, any>, reason: "backdropClick" | "escapeKeyDown" | "closeButtonClick") => void) | undefined;
        key?: import("react").Key | null | undefined;
        PaperProps?: Partial<import("@mui/material").PaperProps<"div", {}>> | undefined;
        variant?: "default" | "flat" | undefined;
        maxWidth?: false | import("@mui/system").Breakpoint | undefined;
        scroll?: "body" | "paper" | undefined;
        fullScreen?: boolean | undefined;
        fullWidth?: boolean | undefined;
        PaperComponent?: import("react").JSXElementConstructor<import("@mui/material").PaperProps<"div", {}>> | undefined;
        TransitionComponent?: import("react").JSXElementConstructor<import("@mui/material/transitions").TransitionProps & {
            children: import("react").ReactElement<any, any>;
        }> | undefined;
        TransitionProps?: import("@mui/material/transitions").TransitionProps | undefined;
        description?: string | undefined;
        showTitle?: boolean | undefined;
        allowClose?: boolean | undefined;
        closeButtonText?: string | undefined;
        closeButtonIcon?: string | undefined;
        appBarColor?: "inherit" | "action" | "error" | "info" | "primary" | "secondary" | "success" | "warning" | undefined;
    };
    closeDialog: () => {
        open: boolean;
    };
}, "icatalyst/dialog"> | import("@reduxjs/toolkit").Slice<import("../..").SnackbarProps, {
    showMessage: (_: import("immer/dist/internal").WritableDraft<import("../..").SnackbarProps>, action: {
        payload: Omit<import("../..").SnackbarProps, "open">;
        type: string;
    }) => {
        open: true;
        children?: import("react").ReactElement<any, any> | undefined;
        classes?: Partial<import("@mui/material").SnackbarClasses> | undefined;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        className?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "true" | "false" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        ref?: import("react").Ref<unknown> | undefined;
        sx?: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
        transitionDuration?: number | {
            appear?: number | undefined;
            enter?: number | undefined;
            exit?: number | undefined;
        } | {
            appear?: number | undefined;
            enter?: number | undefined;
            exit?: number | undefined;
        } | undefined;
        onClose?: ((event: Event | import("react").SyntheticEvent<any, Event>, reason: import("@mui/material").SnackbarCloseReason) => void) | undefined;
        key?: any;
        variant?: "error" | "info" | "success" | "warning" | "message" | undefined;
        TransitionComponent?: import("react").JSXElementConstructor<import("@mui/material/transitions").TransitionProps & {
            children: import("react").ReactElement<any, any>;
        }> | undefined;
        TransitionProps?: import("@mui/material/transitions").TransitionProps | undefined;
        action?: import("react").ReactNode;
        anchorOrigin?: import("@mui/material").SnackbarOrigin | undefined;
        autoHideDuration?: number | null | undefined;
        ClickAwayListenerProps?: Partial<import("@mui/base").ClickAwayListenerProps> | undefined;
        ContentProps?: Partial<import("@mui/material").SnackbarContentProps> | undefined;
        disableWindowBlurListener?: boolean | undefined;
        message?: import("react").ReactNode;
        resumeHideDuration?: number | undefined;
    };
    hideMessage: () => {
        open: boolean;
    };
}, "icatalyst/message"> | import("@reduxjs/toolkit").Slice<import("./settings.slice").SettingsStore, {
    resetLayout<T extends import("../..").LayoutDefinition<string>>(state: import("./settings.slice").SettingsStore, action: {
        payload: T;
        type: string;
    }): void;
    setLayoutUserSettings<T_1 extends import("../..").LayoutDefinition<string>>(state: import("./settings.slice").SettingsStore, action: {
        payload: (Partial<T_1> extends infer T_2 ? { [P in keyof T_2]: T_1[P]; } : never) & {
            name: T_1["name"];
        } & Record<string, any>;
        type: string;
    }): void;
    setDefault<T_3 extends import("../..").LayoutDefinition<string>>(state: import("./settings.slice").SettingsStore, action: {
        payload: T_3;
        type: string;
    }): void;
}, "icatalyst/settings">)[];
export default _default;
export declare const actions: {
    contextPanel: import("@reduxjs/toolkit").CaseReducerActions<{
        openPanel: (_: import("immer/dist/internal").WritableDraft<import("./contextPanel.slice").ContextPanelStore>, action: {
            payload: Omit<import("../..").ContextPanelProps, "open">;
            type: string;
        }) => {
            open: true;
            classes?: Partial<Record<"root" | "drawerContent", string>> | undefined;
            slot?: string | undefined;
            style?: import("react").CSSProperties | undefined;
            title?: string | undefined;
            className?: string | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            hidden?: boolean | undefined;
            id?: string | undefined;
            lang?: string | undefined;
            nonce?: string | undefined;
            placeholder?: string | undefined;
            spellCheck?: (boolean | "true" | "false") | undefined;
            tabIndex?: number | undefined;
            translate?: "yes" | "no" | undefined;
            radioGroup?: string | undefined;
            role?: import("react").AriaRole | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            property?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            color?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: (boolean | "true" | "false") | undefined;
            'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
            'aria-busy'?: (boolean | "true" | "false") | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: (boolean | "true" | "false") | undefined;
            'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: (boolean | "true" | "false") | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: (boolean | "true" | "false") | undefined;
            'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "true" | "false" | "listbox" | "tree" | undefined;
            'aria-hidden'?: (boolean | "true" | "false") | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: (boolean | "true" | "false") | undefined;
            'aria-multiline'?: (boolean | "true" | "false") | undefined;
            'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: (boolean | "true" | "false") | undefined;
            'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: (boolean | "true" | "false") | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: (boolean | "true" | "false") | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
            onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
            onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
            onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
            onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
            onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
            ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
            components?: {
                Root?: import("react").ElementType<any> | undefined;
                Backdrop?: import("react").ElementType<any> | undefined;
            } | undefined;
            componentsProps?: {
                root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
                backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            } | undefined;
            slotProps?: {
                root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
                backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            } | undefined;
            slots?: {
                root?: import("react").ElementType<any> | undefined;
                backdrop?: import("react").ElementType<any> | undefined;
            } | undefined;
            sx?: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
            transitionDuration?: number | {
                appear?: number | undefined;
                enter?: number | undefined;
                exit?: number | undefined;
            } | {
                appear?: number | undefined;
                enter?: number | undefined;
                exit?: number | undefined;
            } | undefined;
            BackdropComponent?: import("react").ElementType<import("@mui/material").BackdropProps<"div", {}>> | undefined;
            BackdropProps?: Partial<import("@mui/material").BackdropProps<"div", {}>> | undefined;
            closeAfterTransition?: boolean | undefined;
            container?: Element | (() => Element | null) | null | undefined;
            disableAutoFocus?: boolean | undefined;
            disableEnforceFocus?: boolean | undefined;
            disableEscapeKeyDown?: boolean | undefined;
            disablePortal?: boolean | undefined;
            disableRestoreFocus?: boolean | undefined;
            disableScrollLock?: boolean | undefined;
            hideBackdrop?: boolean | undefined;
            keepMounted?: boolean | undefined;
            onBackdropClick?: import("react").ReactEventHandler<{}> | undefined;
            onClose?: ((event: {}, reason: "backdropClick" | "escapeKeyDown") => void) | undefined;
            key?: import("react").Key | null | undefined;
            position?: import("../..").ContextPanelPosition | undefined;
            anchor?: "bottom" | "left" | "right" | "top" | undefined;
            elevation?: number | undefined;
            ModalProps?: Partial<import("@mui/material").ModalProps<"div", {}>> | undefined;
            PaperProps?: Partial<import("@mui/material").PaperProps<"div", {}>> | undefined;
            SlideProps?: Partial<import("@mui/material").SlideProps> | undefined;
            variant?: "permanent" | "persistent" | "temporary" | undefined;
            children?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        };
        closePanel: () => {
            open: boolean;
        };
    }, "icatalyst/contextPanel">;
    dialog: import("@reduxjs/toolkit").CaseReducerActions<{
        openDialog: (_: import("immer/dist/internal").WritableDraft<import("../..").DialogProps>, action: {
            payload: Omit<import("../..").DialogProps, "open">;
            type: string;
        }) => {
            open: true;
            children?: import("react").ReactNode;
            classes?: Partial<import("@mui/material").DialogClasses> | undefined;
            slot?: string | undefined;
            style?: import("react").CSSProperties | undefined;
            title?: string | undefined;
            className?: string | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            hidden?: boolean | undefined;
            id?: string | undefined;
            lang?: string | undefined;
            nonce?: string | undefined;
            placeholder?: string | undefined;
            spellCheck?: (boolean | "true" | "false") | undefined;
            tabIndex?: number | undefined;
            translate?: "yes" | "no" | undefined;
            radioGroup?: string | undefined;
            role?: import("react").AriaRole | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            property?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            color?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: (boolean | "true" | "false") | undefined;
            'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
            'aria-busy'?: (boolean | "true" | "false") | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: (boolean | "true" | "false") | undefined;
            'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: (boolean | "true" | "false") | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: (boolean | "true" | "false") | undefined;
            'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "true" | "false" | "listbox" | "tree" | undefined;
            'aria-hidden'?: (boolean | "true" | "false") | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: (boolean | "true" | "false") | undefined;
            'aria-multiline'?: (boolean | "true" | "false") | undefined;
            'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: (boolean | "true" | "false") | undefined;
            'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: (boolean | "true" | "false") | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: (boolean | "true" | "false") | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
            onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
            onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
            onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
            onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
            onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
            ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
            components?: {
                Root?: import("react").ElementType<any> | undefined;
                Backdrop?: import("react").ElementType<any> | undefined;
            } | undefined;
            componentsProps?: {
                root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
                backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            } | undefined;
            slotProps?: {
                root?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
                backdrop?: import("@mui/base").SlotComponentProps<"div", import("@mui/base").ModalUnstyledComponentsPropsOverrides, import("@mui/base").ModalUnstyledOwnerState> | undefined;
            } | undefined;
            slots?: {
                root?: import("react").ElementType<any> | undefined;
                backdrop?: import("react").ElementType<any> | undefined;
            } | undefined;
            sx?: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
            transitionDuration?: number | {
                appear?: number | undefined;
                enter?: number | undefined;
                exit?: number | undefined;
            } | {
                appear?: number | undefined;
                enter?: number | undefined;
                exit?: number | undefined;
            } | undefined;
            BackdropComponent?: import("react").ElementType<import("@mui/material").BackdropProps<"div", {}>> | undefined;
            BackdropProps?: Partial<import("@mui/material").BackdropProps<"div", {}>> | undefined;
            closeAfterTransition?: boolean | undefined;
            container?: Element | (() => Element | null) | null | undefined;
            disableAutoFocus?: boolean | undefined;
            disableEnforceFocus?: boolean | undefined;
            disableEscapeKeyDown?: boolean | undefined;
            disablePortal?: boolean | undefined;
            disableRestoreFocus?: boolean | undefined;
            disableScrollLock?: boolean | undefined;
            hideBackdrop?: boolean | undefined;
            keepMounted?: boolean | undefined;
            onBackdropClick?: import("react").ReactEventHandler<{}> | undefined;
            onClose?: ((event: Record<any, any>, reason: "backdropClick" | "escapeKeyDown" | "closeButtonClick") => void) | undefined;
            key?: import("react").Key | null | undefined;
            PaperProps?: Partial<import("@mui/material").PaperProps<"div", {}>> | undefined;
            variant?: "default" | "flat" | undefined;
            maxWidth?: false | import("@mui/system").Breakpoint | undefined;
            scroll?: "body" | "paper" | undefined;
            fullScreen?: boolean | undefined;
            fullWidth?: boolean | undefined;
            PaperComponent?: import("react").JSXElementConstructor<import("@mui/material").PaperProps<"div", {}>> | undefined;
            TransitionComponent?: import("react").JSXElementConstructor<import("@mui/material/transitions").TransitionProps & {
                children: import("react").ReactElement<any, any>;
            }> | undefined;
            TransitionProps?: import("@mui/material/transitions").TransitionProps | undefined;
            description?: string | undefined;
            showTitle?: boolean | undefined;
            allowClose?: boolean | undefined;
            closeButtonText?: string | undefined;
            closeButtonIcon?: string | undefined;
            appBarColor?: "inherit" | "action" | "error" | "info" | "primary" | "secondary" | "success" | "warning" | undefined;
        };
        closeDialog: () => {
            open: boolean;
        };
    }, "icatalyst/dialog">;
    message: import("@reduxjs/toolkit").CaseReducerActions<{
        showMessage: (_: import("immer/dist/internal").WritableDraft<import("../..").SnackbarProps>, action: {
            payload: Omit<import("../..").SnackbarProps, "open">;
            type: string;
        }) => {
            open: true;
            children?: import("react").ReactElement<any, any> | undefined;
            classes?: Partial<import("@mui/material").SnackbarClasses> | undefined;
            slot?: string | undefined;
            style?: import("react").CSSProperties | undefined;
            title?: string | undefined;
            className?: string | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            hidden?: boolean | undefined;
            id?: string | undefined;
            lang?: string | undefined;
            nonce?: string | undefined;
            placeholder?: string | undefined;
            spellCheck?: (boolean | "true" | "false") | undefined;
            tabIndex?: number | undefined;
            translate?: "yes" | "no" | undefined;
            radioGroup?: string | undefined;
            role?: import("react").AriaRole | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            property?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            color?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: (boolean | "true" | "false") | undefined;
            'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
            'aria-busy'?: (boolean | "true" | "false") | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: (boolean | "true" | "false") | undefined;
            'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: (boolean | "true" | "false") | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: (boolean | "true" | "false") | undefined;
            'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "true" | "false" | "listbox" | "tree" | undefined;
            'aria-hidden'?: (boolean | "true" | "false") | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: (boolean | "true" | "false") | undefined;
            'aria-multiline'?: (boolean | "true" | "false") | undefined;
            'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: (boolean | "true" | "false") | undefined;
            'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: (boolean | "true" | "false") | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: (boolean | "true" | "false") | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
            onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
            onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
            onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
            onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
            onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
            onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
            onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
            onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
            onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
            onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
            onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
            onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
            onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
            onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
            onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
            onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
            ref?: import("react").Ref<unknown> | undefined;
            sx?: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
            transitionDuration?: number | {
                appear?: number | undefined;
                enter?: number | undefined;
                exit?: number | undefined;
            } | {
                appear?: number | undefined;
                enter?: number | undefined;
                exit?: number | undefined;
            } | undefined;
            onClose?: ((event: Event | import("react").SyntheticEvent<any, Event>, reason: import("@mui/material").SnackbarCloseReason) => void) | undefined;
            key?: any;
            variant?: "error" | "info" | "success" | "warning" | "message" | undefined;
            TransitionComponent?: import("react").JSXElementConstructor<import("@mui/material/transitions").TransitionProps & {
                children: import("react").ReactElement<any, any>;
            }> | undefined;
            TransitionProps?: import("@mui/material/transitions").TransitionProps | undefined;
            action?: import("react").ReactNode;
            anchorOrigin?: import("@mui/material").SnackbarOrigin | undefined;
            autoHideDuration?: number | null | undefined;
            ClickAwayListenerProps?: Partial<import("@mui/base").ClickAwayListenerProps> | undefined;
            ContentProps?: Partial<import("@mui/material").SnackbarContentProps> | undefined;
            disableWindowBlurListener?: boolean | undefined;
            message?: import("react").ReactNode;
            resumeHideDuration?: number | undefined;
        };
        hideMessage: () => {
            open: boolean;
        };
    }, "icatalyst/message">;
    settings: import("@reduxjs/toolkit").CaseReducerActions<{
        resetLayout<T extends import("../..").LayoutDefinition<string>>(state: import("./settings.slice").SettingsStore, action: {
            payload: T;
            type: string;
        }): void;
        setLayoutUserSettings<T_1 extends import("../..").LayoutDefinition<string>>(state: import("./settings.slice").SettingsStore, action: {
            payload: (Partial<T_1> extends infer T_2 ? { [P in keyof T_2]: T_1[P]; } : never) & {
                name: T_1["name"];
            } & Record<string, any>;
            type: string;
        }): void;
        setDefault<T_3 extends import("../..").LayoutDefinition<string>>(state: import("./settings.slice").SettingsStore, action: {
            payload: T_3;
            type: string;
        }): void;
    }, "icatalyst/settings">;
};
export declare const reduxConfig: {
    reduxSerializableConfig: {
        ignoredPaths: string[];
        ignoredActionPaths: string[];
        ignoredActions: string[];
    };
};
